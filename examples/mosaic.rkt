#lang racket

(require term-algebra/api)

(define-node elements
  (sort ElementSymbol)
  (op Ac ElementSymbol)
  (op Ag ElementSymbol)
  (op Al ElementSymbol)
  (op Am ElementSymbol)
  (op Ar ElementSymbol)
  (op As ElementSymbol)
  (op At ElementSymbol)
  (op Au ElementSymbol)
  (op B  ElementSymbol)
  (op Ba ElementSymbol)
  (op Be ElementSymbol)
  (op Bh ElementSymbol)
  (op Bi ElementSymbol)
  (op Bk ElementSymbol)
  (op Br ElementSymbol)
  (op C  ElementSymbol)
  (op Ca ElementSymbol)
  (op Cd ElementSymbol)
  (op Ce ElementSymbol)
  (op Cf ElementSymbol)
  (op Cl ElementSymbol)
  (op Cm ElementSymbol)
  (op Co ElementSymbol)
  (op Cn ElementSymbol)
  (op Cr ElementSymbol)
  (op Cs ElementSymbol)
  (op Cu ElementSymbol)
  (op D  ElementSymbol)
  (op Db ElementSymbol)
  (op Ds ElementSymbol)
  (op Dy ElementSymbol)
  (op Er ElementSymbol)
  (op Es ElementSymbol)
  (op Eu ElementSymbol)
  (op F  ElementSymbol)
  (op Fe ElementSymbol)
  (op Fm ElementSymbol)
  (op Fr ElementSymbol)
  (op Ga ElementSymbol)
  (op Gd ElementSymbol)
  (op Ge ElementSymbol)
  (op H  ElementSymbol)
  (op He ElementSymbol)
  (op Hf ElementSymbol)
  (op Hg ElementSymbol)
  (op Ho ElementSymbol)
  (op Hs ElementSymbol)
  (op I  ElementSymbol)
  (op In ElementSymbol)
  (op Ir ElementSymbol)
  (op K  ElementSymbol)
  (op Kr ElementSymbol)
  (op La ElementSymbol)
  (op Li ElementSymbol)
  (op Lr ElementSymbol)
  (op Lu ElementSymbol)
  (op Md ElementSymbol)
  (op Mg ElementSymbol)
  (op Mn ElementSymbol)
  (op Mo ElementSymbol)
  (op Mt ElementSymbol)
  (op N  ElementSymbol)
  (op Na ElementSymbol)
  (op Nb ElementSymbol)
  (op Nd ElementSymbol)
  (op Ne ElementSymbol)
  (op Ni ElementSymbol)
  (op No ElementSymbol)
  (op Np ElementSymbol)
  (op O  ElementSymbol)
  (op Os ElementSymbol)
  (op P  ElementSymbol)
  (op Pa ElementSymbol)
  (op Pb ElementSymbol)
  (op Pd ElementSymbol)
  (op Pm ElementSymbol)
  (op Po ElementSymbol)
  (op Pr ElementSymbol)
  (op Pt ElementSymbol)
  (op Pu ElementSymbol)
  (op Ra ElementSymbol)
  (op Rb ElementSymbol)
  (op Re ElementSymbol)
  (op Rf ElementSymbol)
  (op Rg ElementSymbol)
  (op Rh ElementSymbol)
  (op Rn ElementSymbol)
  (op Ru ElementSymbol)
  (op S  ElementSymbol)
  (op Sb ElementSymbol)
  (op Sc ElementSymbol)
  (op Se ElementSymbol)
  (op Sg ElementSymbol)
  (op Si ElementSymbol)
  (op Sm ElementSymbol)
  (op Sn ElementSymbol)
  (op Sr ElementSymbol)
  (op Ta ElementSymbol)
  (op Tb ElementSymbol)
  (op Tc ElementSymbol)
  (op Te ElementSymbol)
  (op Th ElementSymbol)
  (op Ti ElementSymbol)
  (op Tl ElementSymbol)
  (op Tm ElementSymbol)
  (op U  ElementSymbol)
  (op V  ElementSymbol)
  (op W  ElementSymbol)
  (op Xe ElementSymbol)
  (op Y  ElementSymbol)
  (op Yb ElementSymbol)
  (op Zn ElementSymbol)
  (op Zr ElementSymbol))

(define-node atoms

  (use builtin:string)
  (use builtin:integer)

  (use elements)

  (sorts Atom Element CGParticle Dummy)
  (subsorts [Element Atom] [CGParticle Atom] [Dummy Atom])

  (op (atom String String NonZeroNatural) Atom)
  (op (atom String ElementSymbol NonZeroNatural) Element)
  (op (dummy-atom String String NonZeroNatural) Dummy)
  (op (cg-particle String String NonZeroNatural) CGParticle)

  ; Special case nsites=1
  (op (atom String String) Atom)
  (op (atom String ElementSymbol) Element)
  (op (dummy-atom String String) Dummy)
  (op (cg-particle String String) CGParticle)

  ; Selector definitions
  (vars [L String]
        [aString String]
        [anElementSymbol ElementSymbol]
        [aNonZeroNatural NonZeroNatural])
  (op (.label Atom) String)
  (=> (.label (atom L aString))
      L)
  (=> (.label (atom L anElementSymbol))
      L)
  (=> (.label (atom L aString aNonZeroNatural))
      L)
  (=> (.label (atom L anElementSymbol aNonZeroNatural))
      L))

(define-node fragments

  (use builtin:equality)
  (use atoms)

  (sorts Fragment FragmentList AtomList BondList Bond AtomRef)

  (op (fragment String String FragmentList AtomList BondList) Fragment)
  (op (fragments Fragment ...) FragmentList)
  (op (fragments) FragmentList)
  (op (atoms Atom ...) AtomList)
  (op (atoms) AtomList)
  (op (bonds Bond ...) BondList)
  (op (bonds) BondList)
  (op (bond AtomRef AtomRef) Bond)
  (op (aref String ...) AtomRef)

  (op (.atoms Fragment) AtomList)
  (=> #:vars ([AL AtomList]
              [_1 String] [_2 String] [_3 FragmentList] [_5 BondList])
      (.atoms (fragment _1 _2 _3 AL _5))
      AL)
  
  (op (ref->atom Fragment AtomRef) Atom)
  (=> #:vars ([F Fragment] [L String])
      (ref->atom F (aref L))
      (lookup-in-atoms (.atoms F) L))
  (op (lookup-in-atoms AtomList String) Atom)
  (=> #:vars ([A Atom] [AS Atom ...] [L String])
      (lookup-in-atoms (atoms A AS) L)
      #:cond [(== (.label A) L)  A]
      [#:else (lookup-in-atoms (atoms AS) L)]))

(define-node water
  (use fragments)
  (op (water String) Fragment)
  (=> #:var [L String]
      (water L)
      (fragment L "water" (fragments)
                (atoms (atom "H1" H) (atom "H2" H) (atom "O" O))
                (bonds (bond (aref "H1") (aref "O"))
                       (bond (aref "H2") (aref "O"))))))

(reduce (term water (water "w")))

(reduce (term water (ref->atom (water "w") (aref "O"))))
